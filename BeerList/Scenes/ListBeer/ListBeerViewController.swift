//
//  ListBeerViewController.swift
//  BeerList
//
//  Created by Lucas  N Santana on 24/07/19.
//  Copyright (c) 2019 Lucas  N Santana. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListBeerDisplayLogic: class {
    func displayListBeers(viewModel: ListBeer.FetchBeer.ViewModel)
    func displayDetailBeer()
}

class ListBeerViewController: UIViewController, ListBeerDisplayLogic {
    var interactor: ListBeerBusinessLogic?
    var router: (NSObjectProtocol & ListBeerRoutingLogic & ListBeerDataPassing)?
    
    // MARK: Object lifecycle
    
    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!
    @IBOutlet weak var collectionView: UICollectionView!
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = ListBeerInteractor()
        let presenter = ListBeerPresenter()
        let router = ListBeerRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupView()
        requestBeers()
    }
    private func setupView(){
        self.activityIndicator.hidesWhenStopped = true
        self.collectionView.register(UINib(nibName: "BeerCollectionViewCell", bundle: nil), forCellWithReuseIdentifier: "BeerCollectionViewCell")
    }
    
    // MARK: ListBeerDisplayLogic
    
    var displayedBeers: [ListBeer.FetchBeer.ViewModel.BeerResumed] = []
    
    func requestBeers() {
        activityIndicator.startAnimating()
        interactor?.requestBeers()
    }
    
    func displayListBeers(viewModel: ListBeer.FetchBeer.ViewModel){
        activityIndicator.stopAnimating()
        displayedBeers = viewModel.listBeer
        collectionView.reloadData()
    }
    
    func displayDetailBeer(){
        router?.routeToShowDetailBeer(segue: nil)
    }
}
extension ListBeerViewController : UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return displayedBeers.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell : BeerCollectionViewCell = collectionView.dequeueReusableCell(withReuseIdentifier: "BeerCollectionViewCell", for: indexPath) as! BeerCollectionViewCell
        cell.setup(beer : displayedBeers[indexPath.row])
        return cell
    }
}
extension ListBeerViewController: UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let width = UIScreen.main.bounds.width / 2 - 6.0 //Margin
        return CGSize(width: width, height: 270)
    }
}

extension ListBeerViewController : UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let request = ListBeer.Select.Request(idx: indexPath.row)
        interactor?.beerSelectTap(request: request)
    }
}
